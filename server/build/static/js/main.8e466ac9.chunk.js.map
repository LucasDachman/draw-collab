{"version":3,"sources":["PixelCanvas.js","App.js","serviceWorker.js","index.js"],"names":["PixelCanvas","handlePixelClick","row","col","val","_this","props","matrix","color","onChange","handlePointerMove","e","rect","currentTarget","getBoundingClientRect","xPercent","Math","round","clientX","left","width","yPercent","clientY","top","height","onPointerMove","nextProps","nextState","this","_","isEqual","pointerFriends","_this2","pointers","react_default","a","createElement","className","map","rowIdx","key","cell","colIdx","PixelCanvas_Pixel","onClick","pointer","style","backgroundColor","React","Component","Pixel","_this$props","concat","serverUrl","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setUpSocket","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","socket","io","connect","on","_ref2","sessionKey","canvas","setState","_ref3","r","c","value","state","newMatrix","cloneDeep","_ref4","objectSpread","defineProperty","_ref5","omit","loaded","stop","handlePixelChange","emit","assertThisInitialized","clearCanvas","disconnect","PixelCanvas_PixelCanvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e466ac9.chunk.js","sourcesContent":["import React  from 'react';\nimport _ from 'lodash';\n\nexport default class PixelCanvas extends React.Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.color !== this.props.color ||\n      !_.isEqual(nextProps.matrix, this.props.matrix) ||\n      !_.isEqual(nextProps.pointerFriends, this.props.pointerFriends);\n  }\n\n  handlePixelClick = (row, col) => {\n    const val = this.props.matrix[row][col] === '' ? this.props.color : '';\n    this.props.onChange(row, col, val);\n  }\n\n  handlePointerMove = (e) => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const xPercent = Math.round((e.clientX - rect.left) / rect.width * 100); //x position within the element.\n    const yPercent = Math.round((e.clientY - rect.top) / rect.height * 100);  //y position within the element.\n\n    this.props.onPointerMove(xPercent, yPercent);\n  }\n\n  render() {\n    const matrix = this.props.matrix || [];\n    const pointers = this.props.pointerFriends;\n    return <section className=\"pixel-canvas\" onPointerMove={this.handlePointerMove}>\n      <div className='canvas-rows' >\n        {matrix.map((row, rowIdx) => {\n          return <div className='canvas-row' key={rowIdx}>\n            {row.map((cell, colIdx) =>\n              <Pixel color={cell}\n                onClick={() => this.handlePixelClick(rowIdx, colIdx)}\n                key={cell + colIdx} />\n            )}\n          </div>\n        })}\n      </div>\n      <div className='pointer-friends'>\n        {_.map(pointers, (pointer, key) => {\n          const style = {\n            left: pointer.xPercent + '%',\n            top: pointer.yPercent + '%',\n            backgroundColor: pointer.color\n          };\n          return <div className='pointer-friend' style={style} key={key}></div>\n        })}\n      </div>\n    </section>\n  }\n}\n\nclass Pixel extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.color !== this.props.color;\n  }\n  render() {\n    const {color, onClick} = this.props;\n    return (\n      <div className={`pixel ${color}`}\n        onClick={onClick} />\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\nimport _ from 'lodash';\nimport PixelCanvas from './PixelCanvas';\n\n// const {whyDidYouUpdate} = require('why-did-you-update');\n  // whyDidYouUpdate(React);\n\n// constants\n// const serverUrl = 'https://draw-colab.herokuapp.com/';\n// const serverUrl = 'http://localhost:8080';\n// const serverUrl = 'http://10.0.0.6:8080';\n\nconst serverUrl = process.env.NODE_ENV === 'production' ? 'https://draw-collab.herokuapp.com/' : 'http://localhost:8080';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      matrix: null,\n      pointerFriends: {},\n      loaded: false\n    }\n  }\n\n  componentDidMount() {\n    this.setUpSocket();\n  }\n\n  componentWillUnmount() {\n    this.socket.disconnect();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !_.isEqual(nextState.matrix, this.state.matrix) ||\n      !_.isEqual(nextState.pointerFriends, this.state.pointerFriends);\n  }\n\n  setUpSocket = async () => {\n    this.socket = io.connect(serverUrl);\n\n    this.socket.on('init', ({ sessionKey, color, canvas, pointers }) => {\n      this.sessionKey = sessionKey;\n      this.color = color;\n      this.setState({matrix: canvas.matrix, pointerFriends: pointers});\n    });\n\n    this.socket.on('canvas', (canvas) => {\n      this.setState({ matrix: canvas.matrix });\n    });\n\n    this.socket.on('pixel', ({ r, c, value }) => {\n      this.setState(state => {\n        let newMatrix = _.cloneDeep(state.matrix);\n        newMatrix[r][c] = value;\n        return { matrix: newMatrix };\n      });\n    });\n\n    this.socket.on('pointer', ({ sessionKey, color, xPercent, yPercent }) => {\n      this.setState(state => {\n        const newPointerFriends = {\n          ...state.pointerFriends,\n          [sessionKey]: {\n            xPercent,\n            yPercent,\n            color\n          }\n        };\n        return { pointerFriends: newPointerFriends };\n      })\n    });\n\n    this.socket.on('userDisconnected', ({sessionKey}) => {\n      this.setState(state => {\n        return {pointerFriends: _.omit(state.pointerFriends, sessionKey)};\n      });\n    })\n\n    this.state.loaded = true;\n  }\n\n  handlePixelChange = (r, c, value) => {\n    this.socket.emit('pixel', { r, c, value });\n    // this.setState({matrix: canvas.matrix});\n  }\n\n  handlePointerMove = (xPercent, yPercent) => {\n    const { sessionKey } = this; \n    this.socket.emit('pointer', { sessionKey, xPercent, yPercent });\n  }\n\n  clearCanvas = () => {\n    this.socket.emit('clear');\n  }\n\n  render() {\n    if (this.state.loaded) {\n      return (\n        <main className=\"App\">\n          <PixelCanvas matrix={this.state.matrix}\n            color={this.color}\n            onChange={this.handlePixelChange}\n            onPointerMove={this.handlePointerMove}\n            pointerFriends={this.state.pointerFriends} />\n            <button onClick={this.clearCanvas}>Clear</button>\n        </main>\n      );\n    } else {\n      return (\n        <p>loading...</p>\n      );\n    }\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}